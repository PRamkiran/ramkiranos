DEADLOCKS


27. A program to implement deadlock using Bankers algorithm.

#include<stdio.h>
main()
{
int n,m,c=0,flag,i,j,k,f=0,rh[10][10],rr[10][10],ra[10],tra[10];
printf("enter no.of processes & resources\n");
scanf("%d%d",&n,&m);
printf("enter resource holding matrix\n");
for(i=1;i<=n;i++)
for(j=1;j<=m;j++)
scanf("%d",&rh[i][j]);
printf("enter resource request matrix\n");
for(i=1;i<=n;i++)
for(j=1;j<=m;j++)
scanf("%d",&rr[i][j]);
printf("enter resource availability matrix\n");
for(i=1;i<=m;i++)
scanf("%d",&ra[i]);
while(c<n)
{
for(j=1;j<=n;j++)
{
flag=0;
for(i=1;i<=m;i++)
{
if(rr[j][i]>ra[i])
{
flag=1;
break;
}
}
if(flag!=1)
break;
if(flag==1 && j==n)
f=1;
}
if(flag!=1)
for(k=1;k<=m;k++)
{
ra[k]+=rh[j][k];
rr[j][k]=99;
}
if(f==1)
break;
printf("%d",j);
c++;
}
if(f==1)
printf("three is no safe state\n");
else
printf("is the safe sequence\n");
}
~

[dmgv@LinuxServer ~]$ cc banker.c
[dmgv@LinuxServer ~]$ ./a.out
enter no.of processes & resources
3 3
enter resource holding matrix
3 2 1
1 1 1
2 2 2
enter resource request matrix
2 1 2
1 2 1
2 2 2
enter resource availability matrix
1 2 2
213is the safe sequence

FILE ALLOCATION ALGORITHMS

SEQUENTIAL FILE ALLOCATION


AIM: Write a C Program to implement Sequential File Allocation method.


ALGORITHM:

Step 1: Start the program.
Step 2: Get the number of memory partition and their sizes.
Step 3: Get the number of processes and values of block size for each process. Step 4: First fit algorithm searches all the entire memory block until a hole which is big enough is encountered. It allocates that memory block for the requesting process.
Step 5: Best-fit algorithm searches the memory blocks for the smallest hole which can be allocated to requesting process and allocates if.
Step 6: Worst fit algorithm searches the memory blocks for the largest hole and allocates it to the process.
Step 7: Analyses all the three memory management techniques and display the best algorithm which utilizes the memory resources effectively and efficiently.
Step 8: Stop the program.
Program:

#include<stdio.h> #include<conio.h> main()
{
int n,i,j,b[20],sb[20],t[20],x,c[20][20]; clrscr();
printf("Enter no.of files:"); scanf("%d",&n); for(i=0;i<n;i++)
{
printf("Enter no. of blocks occupied by file%d",i+1); scanf("%d",&b[i]);
printf("Enter the starting block of file%d",i+1); scanf("%d",&sb[i]);
t[i]=sb[i];
for(j=0;j<b[i];j++)
c[i][j]=sb[i]++;
}
printf("Filename\tStart block\tlength\n"); for(i=0;i<n;i++)
printf("%d\t %d \t%d\n",i+1,t[i],b[i]); printf("Enter file name:");
scanf("%d",&x); printf("File name is:%d",x);
printf("length is:%d",b[x-1]); printf("blocks occupied:"); for(i=0;i<b[x-1];i++)
printf("%4d",c[x-1][i]); getch();
}

OUTPUT:

Enter no.of files: 2
Enter no. of blocks occupied by file1 4 Enter the starting block of file1 2
Enter no. of blocks occupied by file2 10 Enter the starting block of file2 5 Filename	Start block	length
1	2	4
2	5	10
Enter file name: rajesh
File name is:12803 length is:0blocks occupied


INDEXED FILE ALLOCATION

AIM: Write a C Program to implement Indexed File Allocation method.

Algorithm:

Step 1: Start.
Step 2: Let n be the size of the buffer Step 3: check if there are any producer
Step 4: if yes check whether the buffer is full
Step 5: If no the producer item is stored in the buffer Step 6: If the buffer is full the producer has to wait
Step 7: Check there is any cosumer. If yes check whether the buffer is empty Step 8: If no the consumer consumes them from the buffer
Step 9: If the buffer is empty, the consumer has to wait.
Step 10: Repeat checking for the producer and consumer till required Step 11: Terminate the process.
Program:
#include<stdio.h> #include<conio.h> main()
{
int n,m[20],i,j,sb[20],s[20],b[20][20],x; clrscr();
printf("Enter no. of files:"); scanf("%d",&n); for(i=0;i<n;i++)
{	printf("Enter starting block and size of file%d:",i+1); scanf("%d%d",&sb[i],&s[i]);
printf("Enter blocks occupied by file%d:",i+1); scanf("%d",&m[i]);
printf("enter blocks of file%d:",i+1); for(j=0;j<m[i];j++)
scanf("%d",&b[i][j]);
} 
printf("\nFile\t index\tlength\n"); for(i=0;i<n;i++)
{
printf("%d\t%d\t%d\n",i+1,sb[i],m[i]);
}
printf("\nEnter file name:"); scanf("%d",&x);
printf("file name is:%d\n",x); i=x-1;
printf("Index is:%d",sb[i]); printf("Block occupied are:"); for(j=0;j<m[i];j++)
printf("%3d",b[i][j]); getch();
}
OUTPUT:
Enter no. of files:2
Enter starting block and size of file1: 2 5 
Enter blocks occupied by file1:10
enter blocks of file1:3 2 5 4 6 7 2 6 4 7
Enter starting block and size of file2: 3 4 
Enter blocks occupied by file2:5
enter blocks of file2: 2 3 4 5 6 
 File	index length
1	 2	  10
 2	  3	    5
Enter file name: file3
file name is:12803
Index is:0 
Block occupied are:

LINKED FILE ALLOCATION

AIM: Write a C Program to implement Linked File Allocation method. ALGORITHM:
Step 1: Create a queue to hold all pages in memory
Step 2: When the page is required replace the page at the head of the queue Step 3: Now the new page is inserted at the tail of the queue
Step 4: Create a stack
Step 5: When the page fault occurs replace page present at the bottom of the stack
Step 6: Stop the allocation.

Program:

#include<stdio.h> 
#include<conio.h> 
struct file
{
char fname[10];
int start,size,block[10];
}f[10];
main()
{
int i,j,n;
clrscr();
printf("Enter no. of files:"); 
scanf("%d",&n); for(i=0;i<n;i++)
{
printf("Enter file name:"); scanf("%s",&f[i].fname); printf("Enter starting block:"); scanf("%d",&f[i].start);
f[i].block[0]=f[i].start; 
printf("Enter no.of blocks:"); 
scanf("%d",&f[i].size); 
printf("Enter block numbers:"); 
for(j=1;j<=f[i].size;j++)
{
scanf("%d",&f[i].block[j]);
}
}
printf("File\tstart\tsize\tblock\n");
for(i=0;i<n;i++)
{
printf("%s\t%d\t%d\t",f[i].fname,f[i].start,f[i].size); for(j=1;j<=f[i].size-1;j++)
printf("%d--->",f[i].block[j]);
printf("%d",f[i].block[j]); 
printf("\n");
}
getch();
}
OUTPUT:

Enter no. of files:2 
Enter file name: file1 
Enter starting block:20 
Enter no.of blocks:6 
Enter block numbers: 4 
12
15
45
32
25
Enter file name: file2 
Enter starting block:12 
Enter no. of blocks:5 
Enter block numbers:6 
5
4
3
2
File	start   size	block
file1    20	6	4--->12--->15--->45--->32--->25
file2   12	5	6--->5--->4--->3--->2
